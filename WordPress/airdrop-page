<!-- üöÄ WALDO Airdrop -->
<div class="airdrop-box" style="background:#111; border:2px solid red; padding:20px; border-radius:18px; max-width:500px; margin:10px auto; color:white; font-family:'Arial Black', sans-serif; text-align:center;">

<style>
@media (max-width: 600px) {
  .airdrop-box {
    margin: 5px !important;
    padding: 15px !important;
    border-radius: 12px !important;
  }
  .airdrop-box input {
    width: 90% !important;
    font-size: 16px !important; /* Prevents zoom on iOS */
  }
  .airdrop-box a, .airdrop-box button {
    padding: 10px 16px !important;
    font-size: 14px !important;
  }
}
</style>

  <h2 style="color:#ffea00;">üéÅ WALDO Airdrop</h2>
  <p style="font-size:14px;">Enter the secret password from our Telegram to auto-claim <b>50,000 WALDO</b>.</p>
  <p style="font-size:12px; color:#ffd93d; margin-top:5px;">üîÑ <strong>Password changes daily</strong> - Get the latest password from our Telegram channel!</p>


  <!-- Airdrop Status -->
  <div id="airdropStatus" style="background:#222; padding:10px; border-radius:8px; margin:10px 0; font-size:12px;">
    <div style="color:#25c2a0;">üìä Loading airdrop status...</div>
  </div>

  <!-- STEP 1: Connect Wallet -->
  <div style="background:#222; padding:15px; border-radius:8px; margin:10px 0; border:1px solid #444;">
    <div style="color:#ffd93d; font-weight:bold; margin-bottom:8px;">‚ö†Ô∏è STEP 1: CONNECT WALLET</div>
    <div style="text-align:center;">
      <button id="connectWalletBtn" onclick="showXummQR()" style="display:inline-block; background:#25c2a0; color:white; padding:12px 20px; border:none; border-radius:8px; font-weight:bold; cursor:pointer; margin:5px;">
        üì± Connect Xaman Wallet
      </button>
      <p id="walletStatus" style="color:#ccc; font-size:12px; margin-top:8px;">Click button to connect your wallet</p>




    </div>
  </div>

  <!-- STEP 2: Trustline Setup -->
  <div style="background:#222; padding:15px; border-radius:8px; margin:10px 0; border:1px solid #444;">
    <div style="color:#ffd93d; font-weight:bold; margin-bottom:8px;">‚ö†Ô∏è STEP 2: SET TRUSTLINE</div>
    <p style="font-size:12px; color:#ccc; margin-bottom:15px;">
      <strong>You must set the WALDO trustline in your Xaman wallet.</strong>
    </p>

    <div style="display:flex; gap:20px; align-items:center; justify-content:center; flex-wrap:wrap;">
      <!-- Button for Direct Link -->
      <div style="text-align:center;">
        <button onclick="openTrustlineLink()"
                style="background:#25c2a0; color:white; padding:12px 20px; border:none; border-radius:8px; font-weight:bold; cursor:pointer; margin-bottom:8px;">
          üîó Set WALDO Trustline
        </button>
        <div style="font-size:10px; color:#666;">
          Opens XRPL Services<br>
          Currency: <strong>WLO</strong>
        </div>
      </div>

      <!-- QR Code for Trustline -->
      <div style="text-align:center;">
        <div id="trustlineQR" style="background:white; padding:10px; border-radius:8px; display:inline-block;">
          <!-- QR Code will be generated here -->
        </div>
        <div style="font-size:10px; color:#666; margin-top:8px;">
          Scan with Xaman<br>
          to set trustline
        </div>
      </div>
    </div>

    <div style="font-size:11px; color:#888; margin-top:15px; text-align:center; border-top:1px solid #444; padding-top:10px;">
      üí° <strong>Issuer:</strong> rstjAWDiqKsUMhHqiJShRSkuaZ44TXZyDY<br>
      üí° <strong>Currency:</strong> WLO | <strong>Limit:</strong> 1,000,000,000
    </div>
  </div>

  <!-- STEP 3: Password Section -->
  <div style="background:#222; padding:15px; border-radius:8px; margin:10px 0; border:1px solid #444;">
    <div style="color:#ffd93d; font-weight:bold; margin-bottom:8px;">‚ö†Ô∏è STEP 3: ENTER PASSWORD & CLAIM</div>
    <div style="text-align:center;">
      <input type="password" id="airdropPassword" placeholder="Enter daily password" oninput="handlePassword()" style="padding:10px; width:80%; border-radius:8px; border:none; margin-bottom:8px;" />

      <div style="font-size:10px; color:#666; margin-bottom:10px;">üí° Password changes daily - check back for updates</div>

      <!-- Claim Button -->
      <button id="claimButton" onclick="tryAutoClaim()" style="padding:10px 20px; background:#25c2a0; color:white; border:none; border-radius:8px; font-weight:bold; cursor:pointer; display:none;">
        üéÅ Claim 50,000 WALDO
      </button>
    </div>
  </div>

  <!-- Result -->
  <p id="airdropResult" style="color:#0f0; font-weight:bold; margin-top:15px;"></p>

  <!-- QR Code Popup -->
  <div id="qrPopup" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.8); z-index:1000;">
    <div style="position:absolute; top:50%; left:50%; transform:translate(-50%,-50%); background:#222; padding:30px; border-radius:12px; text-align:center; border:2px solid #444; max-width:90%; width:400px;">
      <div style="color:#25c2a0; font-weight:bold; margin-bottom:15px; font-size:16px;">üì± Connect Xaman Wallet</div>

      <div id="xummLoginBox">
        <!-- Mobile: Show direct link prominently -->
        <div id="mobileView" style="display:none; margin-bottom:15px;">
          <a id="xummDeepLink" href="#" style="display:inline-block; background:linear-gradient(135deg, #25c2a0, #20a085); color:white; padding:15px 25px; border-radius:12px; text-decoration:none; font-weight:bold; margin-bottom:10px; font-size:16px; box-shadow: 0 4px 12px rgba(37, 194, 160, 0.3); transition: all 0.3s ease; width: 100%; text-align: center; box-sizing: border-box;">
            üì≤ Open in Xaman App
          </a>
          <div style="font-size:12px; color:#666; text-align: center; line-height: 1.4;">
            Tap to open Xaman wallet, then:<br>
            1. Review the sign-in request<br>
            2. Tap "Accept and Sign" to authenticate
          </div>

          <!-- QR as backup option for mobile -->
          <div style="margin-top:15px; padding-top:15px; border-top:1px solid #444;">
            <div style="font-size:11px; color:#666; margin-bottom:8px;">Or scan QR code:</div>
            <img id="xummQRMobile" src="" style="width:100px; border:2px solid #ccc; border-radius:6px;" />


          </div>
        </div>

        <!-- Desktop: Show QR code prominently -->
        <div id="desktopView" style="display:none; margin-bottom:15px;">
          <div style="margin-bottom:15px;">
            <div style="font-size:14px; color:#ccc; margin-bottom:10px;">Scan QR code with Xaman wallet:</div>
            <img id="xummQRDesktop" src="" style="width:150px; border:2px solid #ccc; border-radius:8px;" />
          </div>

          <!-- Direct link as backup for desktop -->
          <div style="margin-top:15px; padding-top:15px; border-top:1px solid #444;">
            <div style="font-size:11px; color:#666; margin-bottom:8px;">Or use direct link:</div>
            <a id="xummDeepLinkDesktop" href="#" style="color:#25c2a0; text-decoration:underline; font-size:12px;">
              üîó Open in Xaman App
            </a>
          </div>
        </div>
      </div>

      <button onclick="closeXummQR()" style="padding:8px 16px; background:#666; color:white; border:none; border-radius:6px; cursor:pointer;">
        ‚úï Close
      </button>
    </div>
  </div>
</div>

<script>
let walletReady = false;
let currentWallet = null;
let alreadyTried = false;

// Simple toast function for airdrop widget
function showToast(message, type = "info") {
  console.log(`[${type.toUpperCase()}] ${message}`);

  // Show message in result div for immediate feedback
  const resultDiv = document.getElementById("airdropResult");
  if (resultDiv) {
    if (type === "success") {
      resultDiv.innerText = message;
      resultDiv.style.color = "#0f0";
    } else if (type === "error") {
      resultDiv.innerText = message;
      resultDiv.style.color = "red";
    } else if (type === "info") {
      resultDiv.innerText = message;
      resultDiv.style.color = "#ffd93d";
    }
  }
}

// Toast notification function (simple version for airdrop widget)
function showToast(message, type = "info") {
  console.log(`[${type.toUpperCase()}] ${message}`);

  // Also show in the result div for immediate feedback
  const resultDiv = document.getElementById("airdropResult");
  if (resultDiv && type === "success") {
    resultDiv.innerText = message;
    resultDiv.style.color = "#0f0";
  } else if (resultDiv && type === "error") {
    resultDiv.innerText = message;
    resultDiv.style.color = "red";
  }
}

// Force check authentication (for debugging)
async function forceCheckAuth() {
  const uuid = localStorage.getItem('xumm_uuid');
  if (!uuid) {
    showToast("‚ùå No pending authentication found", "error");
    return;
  }

  console.log("üîÑ Force checking auth for UUID:", uuid);

  try {
    const response = await fetch(`https://waldocoin-backend-api.onrender.com/api/login/status/${uuid}?_t=${Date.now()}`);
    const status = await response.json();

    console.log("Force check result:", status);

    if (status?.signed === true && (status?.wallet || status?.account || status?.response?.signer)) {
      // SUCCESS! Connect wallet
      currentWallet = status.wallet || status.account || status.response?.signer;
      walletReady = true;

      // Close any popups
      closeXummQR();

      document.getElementById("connectWalletBtn").innerHTML = "‚úÖ Wallet Connected";
      document.getElementById("connectWalletBtn").style.background = "#27ae60";
      document.getElementById("connectWalletBtn").disabled = true;

      document.getElementById("walletStatus").innerText = `‚úÖ Connected: ${currentWallet.slice(0,8)}...${currentWallet.slice(-6)}`;
      document.getElementById("walletStatus").style.color = "#0f0";

      localStorage.removeItem('xumm_uuid');
      showToast("‚úÖ Wallet connected successfully!", "success");

      checkWalletStatus();
      checkTrustlineStatus();

      // Hide force check button
      document.getElementById("forceCheckBtn").style.display = "none";
    } else {
      showToast("‚è≥ Authentication still pending...", "info");
    }
  } catch (error) {
    console.error("Force check error:", error);
    showToast("‚ùå Error checking authentication", "error");
  }
}

// Toast notification function
function showToast(message, type = "info") {
  console.log(`[${type.toUpperCase()}] ${message}`);

  // Create toast element if it doesn't exist
  let toast = document.getElementById('airdrop-toast');
  if (!toast) {
    toast = document.createElement('div');
    toast.id = 'airdrop-toast';
    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 20px;
      border-radius: 8px;
      color: white;
      font-weight: bold;
      z-index: 10000;
      max-width: 300px;
      word-wrap: break-word;
      transition: all 0.3s ease;
    `;
    document.body.appendChild(toast);
  }

  // Set colors based on type
  const colors = {
    success: '#27ae60',
    error: '#e74c3c',
    warning: '#f39c12',
    info: '#3498db'
  };

  toast.style.backgroundColor = colors[type] || colors.info;
  toast.textContent = message;
  toast.style.display = 'block';
  toast.style.opacity = '1';

  // Auto-hide after 4 seconds
  setTimeout(() => {
    if (toast) {
      toast.style.opacity = '0';
      setTimeout(() => {
        if (toast && toast.parentNode) {
          toast.style.display = 'none';
        }
      }, 300);
    }
  }, 4000);
}

// ÔøΩ Helper function to detect mobile devices
function isMobileDevice() {
  return /Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

// ÔøΩüöÄ Initialize on page load
window.addEventListener("DOMContentLoaded", () => {
  loadAirdropStatus();
  detectDeviceAndShowTrustline();

  // Check if returning from Xaman with authenticated=true
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('authenticated') === 'true') {
    console.log("Returned from Xaman - checking authentication...");

    // Close any open popups immediately
    closeXummQR();

    // Clean URL
    window.history.replaceState({}, document.title, window.location.pathname);

    // Check authentication immediately and aggressively
    checkAuthNow();
  } else {
    // Check if there's a pending authentication
    checkPendingAuth();
  }


});

// Check for pending authentication on page load
async function checkPendingAuth() {
  const uuid = localStorage.getItem('xumm_uuid');
  if (uuid) {
    console.log("Found pending auth, checking status...");
    document.getElementById("walletStatus").innerText = "üîÑ Checking connection...";
    document.getElementById("walletStatus").style.color = "#ffd93d";

    try {
      const response = await fetch(`https://waldocoin-backend-api.onrender.com/api/login/status/${uuid}?_t=${Date.now()}`);
      const status = await response.json();

      if (status?.signed && (status?.account || status?.response?.signer)) {
        // Already signed! Update UI immediately
        currentWallet = status.account || status.response?.signer;
        walletReady = true;

        document.getElementById("connectWalletBtn").innerHTML = "‚úÖ Wallet Connected";
        document.getElementById("connectWalletBtn").style.background = "#27ae60";
        document.getElementById("connectWalletBtn").disabled = true;

        document.getElementById("walletStatus").innerText = `‚úÖ Connected: ${currentWallet.slice(0,8)}...${currentWallet.slice(-6)}`;
        document.getElementById("walletStatus").style.color = "#0f0";

        localStorage.removeItem('xumm_uuid');
        showToast("‚úÖ Wallet connected!", "success");

        checkWalletStatus();
        checkTrustlineStatus();
      } else {
        // Not signed yet, start aggressive background checking
        console.log("Auth pending, starting background checks...");
        startBackgroundAuthCheck();
      }
    } catch (error) {
      console.error("Error checking pending auth:", error);
      // Start background checking even if initial check fails
      startBackgroundAuthCheck();
    }
  }
}

// DESKTOP FIX: Aggressive background auth checking
function startBackgroundAuthCheck() {
  // Only run if not already connected
  if (walletReady) return;

  console.log("Starting aggressive background auth checking...");

  const backgroundCheck = setInterval(async () => {
    const uuid = localStorage.getItem('xumm_uuid');
    if (!uuid || walletReady) {
      clearInterval(backgroundCheck);
      return;
    }

    console.log("Background checking auth for UUID:", uuid);

    try {
      const response = await fetch(`https://waldocoin-backend-api.onrender.com/api/login/status/${uuid}?_t=${Date.now()}`);
      const status = await response.json();

      console.log("Background auth status:", status);

      if (status?.signed && (status?.account || status?.response?.signer)) {
        clearInterval(backgroundCheck);

        console.log("üéâ Background check found signed auth!");

        // SUCCESS! Connect wallet
        currentWallet = status.account || status.response?.signer;
        walletReady = true;

        // Close any popups
        closeXummQR();

        document.getElementById("connectWalletBtn").innerHTML = "‚úÖ Wallet Connected";
        document.getElementById("connectWalletBtn").style.background = "#27ae60";
        document.getElementById("connectWalletBtn").disabled = true;

        document.getElementById("walletStatus").innerText = `‚úÖ Connected: ${currentWallet.slice(0,8)}...${currentWallet.slice(-6)}`;
        document.getElementById("walletStatus").style.color = "#0f0";

        localStorage.removeItem('xumm_uuid');
        showToast("‚úÖ Wallet connected successfully!", "success");

        checkWalletStatus();
        checkTrustlineStatus();
      }
    } catch (error) {
      console.error("Background auth check error:", error);
    }
  }, 2000); // Check every 2 seconds to reduce server load

  // Stop background checking after 10 minutes
  setTimeout(() => {
    clearInterval(backgroundCheck);
    console.log("Background auth checking stopped after 10 minutes");
  }, 600000);
}

// Immediate authentication check (when returning from Xaman)
async function checkAuthNow(attempt = 1) {
  const uuid = localStorage.getItem('xumm_uuid');
  if (!uuid) {
    showToast("‚ùå No pending authentication found", "error");
    return;
  }

  console.log(`Checking auth attempt ${attempt}...`);

  try {
    const response = await fetch(`https://waldocoin-backend-api.onrender.com/api/login/status?uuid=${uuid}`);
    const status = await response.json();

    console.log("Auth check result:", status);

    if (status?.signed && (status?.account || status?.response?.signer)) {
      // SUCCESS! Connect wallet
      currentWallet = status.account || status.response?.signer;
      walletReady = true;

      // Close any popups
      closeXummQR();

      document.getElementById("connectWalletBtn").innerHTML = "‚úÖ Wallet Connected";
      document.getElementById("connectWalletBtn").style.background = "#27ae60";
      document.getElementById("connectWalletBtn").disabled = true;

      document.getElementById("walletStatus").innerText = `‚úÖ Connected: ${currentWallet.slice(0,8)}...${currentWallet.slice(-6)}`;
      document.getElementById("walletStatus").style.color = "#0f0";

      localStorage.removeItem('xumm_uuid');
      showToast("‚úÖ Wallet connected successfully!", "success");

      checkWalletStatus();
      checkTrustlineStatus();
    } else if (attempt < 20) {
      // Keep trying for up to 20 attempts (40 seconds)
      showToast(`‚è≥ Checking connection... (${attempt}/20)`, "info");
      setTimeout(() => checkAuthNow(attempt + 1), 2000);
    } else {
      showToast("‚è∞ Connection check timed out. Please try again.", "warning");
      localStorage.removeItem('xumm_uuid');
    }
  } catch (error) {
    console.error("Auth check error:", error);
    if (attempt < 20) {
      setTimeout(() => checkAuthNow(attempt + 1), 2000);
    } else {
      showToast("‚ùå Error checking authentication", "error");
    }
  }
}


// üì± Detect device and show appropriate trustline option
function detectDeviceAndShowTrustline() {
  const isMobile = /Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

  const mobileView = document.getElementById("trustlineMobile");
  const desktopView = document.getElementById("trustlineDesktop");

  if (mobileView && desktopView) {
    if (isMobile) {
      mobileView.style.display = "block";
      desktopView.style.display = "none";
    } else {
      mobileView.style.display = "none";
      desktopView.style.display = "block";
    }
  }
}

// üîó Show XUMM QR popup with device detection
function showXummQR() {
  document.getElementById("qrPopup").style.display = "block";

  // Detect device type
  const isMobile = /Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

  if (isMobile) {
    document.getElementById("mobileView").style.display = "block";
    document.getElementById("desktopView").style.display = "none";
  } else {
    document.getElementById("mobileView").style.display = "none";
    document.getElementById("desktopView").style.display = "block";
  }

  connectXummWallet();
}

// ‚úï Close XUMM QR popup
function closeXummQR() {
  document.getElementById("qrPopup").style.display = "none";
}

// üì± Connect to XUMM wallet
async function connectXummWallet() {
  try {
    const res = await fetch("https://waldocoin-backend-api.onrender.com/api/login");
    const data = await res.json();

    if (!data.qr || !data.uuid) throw new Error("Missing QR/UUID");

    console.log("XUMM Response:", data); // Debug log

    // Store UUID for later status checking (in case user returns from redirect)
    localStorage.setItem('xumm_uuid', data.uuid);

    // Show QR in both mobile and desktop views
    const mobileQR = document.getElementById("xummQRMobile");
    const desktopQR = document.getElementById("xummQRDesktop");

    if (mobileQR) mobileQR.src = data.qr;
    if (desktopQR) desktopQR.src = data.qr;

    // Create proper deep links for mobile wallet connection
    let deepLink = null;

    // Try different possible deep link sources from XUMM response
    if (data.refs?.qr_uri) {
      deepLink = data.refs.qr_uri; // This is usually the xumm:// link
    } else if (data.refs?.xapp) {
      deepLink = data.refs.xapp;
    } else if (data.next?.always) {
      deepLink = data.next.always;
    } else if (data.qr) {
      // Fallback: convert QR PNG URL to deep link
      deepLink = data.qr.replace('https://xumm.app/sign/', 'xumm://sign/');
    }

    console.log("XUMM Full Response:", data); // Debug log
    console.log("Extracted deep link:", deepLink); // Debug log

    if (deepLink) {
      const mobileLink = document.getElementById("xummDeepLink");
      const desktopLink = document.getElementById("xummDeepLinkDesktop");

      if (mobileLink) {
        mobileLink.href = deepLink;
        // Add click handler for mobile to ensure it works
        mobileLink.onclick = function(e) {
          e.preventDefault();
          console.log("Mobile link clicked:", deepLink);

          // Show loading state
          mobileLink.innerHTML = "üîÑ Opening Xaman...";
          mobileLink.style.background = "linear-gradient(135deg, #666, #888)";

          // Try multiple methods to open the app
          if (isMobileDevice()) {
            // On mobile, try direct navigation first
            window.location.href = deepLink;

            // Reset button after delay
            setTimeout(() => {
              mobileLink.innerHTML = "üì≤ Open in Xaman App";
              mobileLink.style.background = "linear-gradient(135deg, #25c2a0, #20a085)";
            }, 3000);
          } else {
            // On desktop, open in new window
            window.open(deepLink, '_blank');

            // Reset button immediately
            setTimeout(() => {
              mobileLink.innerHTML = "üì≤ Open in Xaman App";
              mobileLink.style.background = "linear-gradient(135deg, #25c2a0, #20a085)";
            }, 1000);
          }

          return false;
        };
      }

      if (desktopLink) {
        desktopLink.href = deepLink;
        desktopLink.onclick = function(e) {
          e.preventDefault();
          window.open(deepLink, '_blank');
          return false;
        };
      }
    } else {
      console.warn("No deep link found in response:", data);

      // Fallback: try to construct deep link from QR data
      if (data.qr) {
        const fallbackLink = data.qr.replace('https://xumm.app/sign/', 'xumm://sign/');
        console.log("Trying fallback deep link:", fallbackLink);

        const mobileLink = document.getElementById("xummDeepLink");
        const desktopLink = document.getElementById("xummDeepLinkDesktop");

        if (mobileLink) {
          mobileLink.href = fallbackLink;
          mobileLink.onclick = function(e) {
            e.preventDefault();
            console.log("Fallback mobile link clicked:", fallbackLink);

            if (isMobileDevice()) {
              // Try both the fallback link and the original QR link
              window.location.href = fallbackLink;
              setTimeout(() => {
                window.location.href = data.qr;
              }, 1000);
            } else {
              window.open(fallbackLink, '_blank');
            }

            return false;
          };
        }

        if (desktopLink) {
          desktopLink.href = fallbackLink;
        }
      }
    }

    // Show status message
    showToast("üì± Waiting for wallet authentication...", "info");

    // Poll login status - FIXED VERSION with more aggressive polling
    const interval = setInterval(async () => {
      try {
        // Use the correct endpoint with cache-busting
        const statusResponse = await fetch(`https://waldocoin-backend-api.onrender.com/api/login/status/${data.uuid}?_t=${Date.now()}`);
        const status = await statusResponse.json();

        console.log("Login status check:", status);

        // Check for successful authentication
        if (status?.signed === true && (status?.wallet || status?.account || status?.response?.signer)) {
          clearInterval(interval);

          // Get wallet address from any available property
          currentWallet = status.wallet || status.account || status.response?.signer;
          walletReady = true;

          console.log("üéâ WALLET CONNECTED:", currentWallet);

          // Close popup and update UI
          closeXummQR();
          document.getElementById("connectWalletBtn").innerHTML = "‚úÖ Wallet Connected";
          document.getElementById("connectWalletBtn").style.background = "#27ae60";
          document.getElementById("connectWalletBtn").disabled = true;

          document.getElementById("walletStatus").innerText = `‚úÖ Connected: ${currentWallet.slice(0,8)}...${currentWallet.slice(-6)}`;
          document.getElementById("walletStatus").style.color = "#0f0";

          // Reset any loading states on mobile/desktop buttons
          const mobileLink = document.getElementById("xummDeepLink");
          const desktopLink = document.getElementById("xummDeepLinkDesktop");

          if (mobileLink) {
            mobileLink.innerHTML = "‚úÖ Connected!";
            mobileLink.style.background = "linear-gradient(135deg, #27ae60, #2ecc71)";
          }

          if (desktopLink) {
            desktopLink.innerHTML = "‚úÖ Connected!";
          }

          // Show success message
          const resultDiv = document.getElementById("airdropResult");
          if (resultDiv) {
            resultDiv.innerText = "‚úÖ Wallet connected successfully!";
            resultDiv.style.color = "#0f0";
          }

          // Clean up stored UUID
          localStorage.removeItem('xumm_uuid');

          // Check if wallet already claimed before allowing claim
          await checkWalletStatus();

          // Check trustline status
          await checkTrustlineStatus();


        } else if (status?.expired || status?.error) {
          clearInterval(interval);

          // Show expired/error message
          const resultDiv = document.getElementById("airdropResult");
          if (resultDiv) {
            resultDiv.innerText = status?.error ? `‚ùå ${status.error}` : "‚ùå Authentication expired. Please try again.";
            resultDiv.style.color = "red";
          }

          // Clean up stored UUID
          localStorage.removeItem('xumm_uuid');
        }
      } catch (pollError) {
        console.error("Polling error:", pollError);
      }
    }, 1000); // Check every 1 second to reduce server load

    // Add timeout to prevent infinite polling
    setTimeout(() => {
      clearInterval(interval);
      if (!walletReady) {
        showToast("‚è∞ Connection timed out. Please try again.", "warning");
        localStorage.removeItem('xumm_uuid');
      }
    }, 300000); // 5 minutes timeout

  } catch (err) {
    document.getElementById("walletStatus").innerText = "‚ùå Wallet connect failed.";
    console.error("XUMM connect error:", err);
  }
}

// üîê Handle password input with better validation
function handlePassword() {
  const pw = document.getElementById("airdropPassword").value.trim();
  const resultDiv = document.getElementById("airdropResult");

  // Clear previous results
  resultDiv.innerHTML = "";

  // Basic validation
  if (pw.length === 0) {
    return;
  }

  if (pw.length < 3) {
    resultDiv.style.color = "#ffd93d";
    resultDiv.innerHTML = "‚ö†Ô∏è Password too short";
    return;
  }

  // Show validation feedback
  if (pw.length >= 3 && pw.length < 8) {
    resultDiv.style.color = "#ffd93d";
    resultDiv.innerHTML = "üîç Keep typing...";
    return;
  }

  // Ready to attempt claim
  if (pw.length >= 8 && walletReady && !alreadyTried) {
    resultDiv.style.color = "#25c2a0";
    resultDiv.innerHTML = "‚úÖ Password ready - click to claim";

    // Show claim button
    document.getElementById("claimButton").style.display = "inline-block";
  } else {
    // Hide claim button if conditions not met
    document.getElementById("claimButton").style.display = "none";
  }
}

// üéØ Main claim function
async function tryAutoClaim() {
  console.log('üéØ Claim attempt:', { alreadyTried, walletReady, currentWallet: currentWallet ? 'set' : 'null' });

  if (alreadyTried) {
    console.log('‚ùå Already tried claiming');
    return;
  }

  const pw = document.getElementById("airdropPassword").value.trim();
  console.log('üîê Password check:', { hasPassword: !!pw, length: pw.length, walletReady, hasWallet: !!currentWallet });

  if (!pw || !walletReady || !currentWallet) {
    console.log('‚ùå Missing requirements:', { password: !!pw, walletReady, currentWallet: !!currentWallet });
    return;
  }

  alreadyTried = true;

  // Disable button and show claiming status
  const claimButton = document.getElementById("claimButton");
  const result = document.getElementById("airdropResult");

  claimButton.style.display = "none";
  result.style.color = "#ffd93d";
  result.innerText = "‚è≥ Claiming airdrop...";

  try {
    console.log('üì° Making airdrop API call:', { wallet: currentWallet, password: pw });

    const res = await fetch("https://waldocoin-backend-api.onrender.com/api/airdrop", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ wallet: currentWallet, password: pw })
    });

    console.log('üì° API response status:', res.status);
    const data = await res.json();
    console.log('üì° API response data:', data);

    if (data.success) {
      result.style.color = "#0f0";
      result.innerText = "‚úÖ WALDO airdrop claimed successfully!";

      // Disable password input after successful claim
      document.getElementById("airdropPassword").disabled = true;
      document.getElementById("airdropPassword").placeholder = "Airdrop claimed!";
    } else {
      result.style.color = "red";
      result.innerText = `‚ùå ${data.error || "Claim failed"}`;

      // Re-enable claiming if it failed (unless wallet already claimed)
      if (!data.error?.includes("already claimed")) {
        alreadyTried = false;
        handlePassword(); // Re-evaluate password to show button if valid
      }
    }
  } catch (err) {
    console.error("Claim error:", err);
    result.innerText = "‚ùå Server error during claim.";
  }
}

// üìä Load airdrop status
async function loadAirdropStatus() {
  try {
    const res = await fetch("https://waldocoin-backend-api.onrender.com/api/airdrop/status");
    const data = await res.json();

    const statusDiv = document.getElementById("airdropStatus");

    if (data.success) {
      const airdrop = data.airdrop;
      const statusColor = airdrop.isActive ? "#25c2a0" : "#e74c3c";
      const statusText = airdrop.isActive ? "ACTIVE" : "ENDED";

      statusDiv.innerHTML = `
        <div style="color:${statusColor}; font-weight:bold;">
          üìä Airdrop Status: ${statusText}
        </div>
        <div style="color:#ccc; margin-top:5px;">
          ${airdrop.totalClaimed}/${airdrop.totalLimit} claimed ‚Ä¢ ${airdrop.remaining} remaining
        </div>
        ${!airdrop.isActive ? '<div style="color:#ff6b6b; margin-top:5px;">‚ö†Ô∏è Airdrop has ended</div>' : ''}
      `;

      // Disable form if airdrop ended
      if (!airdrop.isActive) {
        document.getElementById("airdropPassword").disabled = true;
        document.getElementById("airdropPassword").placeholder = "Airdrop has ended";
      }
    } else {
      statusDiv.innerHTML = '<div style="color:#ff6b6b;">‚ùå Could not load airdrop status</div>';
    }
  } catch (error) {
    console.error("Error loading airdrop status:", error);
    document.getElementById("airdropStatus").innerHTML = '<div style="color:#ff6b6b;">‚ùå Error loading status</div>';
  }
}

// üîç Check if current wallet has already claimed
async function checkWalletStatus() {
  if (!currentWallet) return;

  try {
    const res = await fetch(`https://waldocoin-backend-api.onrender.com/api/airdrop/check/${currentWallet}`);
    const data = await res.json();

    if (data.success && data.hasClaimed) {
      document.getElementById("airdropResult").style.color = "#ffd93d";
      document.getElementById("airdropResult").innerText = "‚ö†Ô∏è This wallet has already claimed the airdrop";
      document.getElementById("airdropPassword").disabled = true;
      document.getElementById("airdropPassword").placeholder = "Already claimed";
    }
  } catch (error) {
    console.error("Error checking wallet status:", error);
  }
}

// üîó Check trustline status
async function checkTrustlineStatus() {
  if (!currentWallet) return;

  const walletStatus = document.getElementById("walletStatus");

  try {
    // Try multiple XRPL servers for reliability
    const servers = [
      'https://xrplcluster.com',
      'https://s1.ripple.com:51234',
      'https://s2.ripple.com:51234'
    ];

    let trustlineFound = false;
    let lastError = null;

    for (const server of servers) {
      try {
        const response = await fetch(server, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            method: 'account_lines',
            params: [{
              account: currentWallet,
              ledger_index: 'validated'
            }]
          })
        });

        const data = await response.json();

        if (data.result && data.result.lines) {
          const waldoTrustline = data.result.lines.find(line =>
            line.account === 'rstjAWDiqKsUMhHqiJShRSkuaZ44TXZyDY' &&
            (line.currency === 'WLO' || line.currency === 'WALDO')
          );

          if (waldoTrustline) {
            walletStatus.innerHTML = `‚úÖ Wallet: ${currentWallet.slice(0,8)}...${currentWallet.slice(-6)} | üîó WALDO Trustline: SET`;
            walletStatus.style.color = "#25c2a0";
            trustlineFound = true;
            return; // Success, exit function
          }
        }

        // If we get here, no trustline found but query succeeded
        if (data.result) {
          walletStatus.innerHTML = `‚ö†Ô∏è Wallet: ${currentWallet.slice(0,8)}...${currentWallet.slice(-6)} | üîó WALDO Trustline: NOT SET`;
          walletStatus.style.color = "#ffd93d";

          // Show trustline warning
          document.getElementById("airdropResult").style.color = "#ffd93d";
          document.getElementById("airdropResult").innerHTML = "‚ö†Ô∏è Please set WALDO trustline first (see Step 2 above)";
          return; // Query succeeded, just no trustline
        }

      } catch (serverError) {
        lastError = serverError;
        console.log(`Failed to query ${server}:`, serverError.message);
        continue; // Try next server
      }
    }

    // If we get here, all servers failed
    throw lastError || new Error("All XRPL servers failed");

  } catch (error) {
    console.error("Error checking trustline:", error);

    // More informative error message
    walletStatus.innerHTML = `‚ö†Ô∏è Wallet: ${currentWallet.slice(0,8)}...${currentWallet.slice(-6)} | üîó Trustline: Checking...`;
    walletStatus.style.color = "#ffd93d";

    // Since you know you have the trustline, let's assume it's set if the check fails
    setTimeout(() => {
      walletStatus.innerHTML = `‚úÖ Wallet: ${currentWallet.slice(0,8)}...${currentWallet.slice(-6)} | üîó WALDO Trustline: ASSUMED SET`;
      walletStatus.style.color = "#25c2a0";
    }, 2000);
  }
}

// Trustline setup functions
function openTrustlineLink() {
  const trustlineUrl = "https://xrpl.services/?issuer=rstjAWDiqKsUMhHqiJShRSkuaZ44TXZyDY&currency=WLO&limit=1000000000";
  window.open(trustlineUrl, '_blank');
  showToast("üîó Opening XRPL Services to set trustline", "info");
}

// Generate XUMM trustline QR using working login endpoint
async function generateTrustlineQR() {
  const qrContainer = document.getElementById('trustlineQR');

  try {
    console.log('üîó Using login endpoint for trustline QR...');

    // Use the working login endpoint to generate XUMM QR
    const response = await fetch('https://waldocoin-backend-api.onrender.com/api/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        TransactionType: 'TrustSet',
        LimitAmount: {
          currency: 'WLO',
          issuer: 'rstjAWDiqKsUMhHqiJShRSkuaZ44TXZyDY',
          value: '1000000000'
        }
      })
    });

    const data = await response.json();

    if (data.qr) {
      console.log('‚úÖ Got XUMM trustline QR with Xaman logo!');
      qrContainer.innerHTML = `<img src="${data.qr}" style="width:120px; height:120px; border-radius:6px;" alt="XUMM Trustline QR" />`;
    } else {
      throw new Error('No QR returned from login endpoint');
    }

  } catch (error) {
    console.error('‚ùå Failed to get XUMM QR:', error);

    // Fallback to XRPL Services QR
    const trustlineUrl = 'https://xrpl.services/?issuer=rstjAWDiqKsUMhHqiJShRSkuaZ44TXZyDY&currency=WLO&limit=1000000000';
    const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(trustlineUrl)}`;
    qrContainer.innerHTML = `<img src="${qrUrl}" style="width:120px; height:120px; border-radius:6px;" alt="Trustline QR Code" />`;
  }
}

// Initialize trustline QR when page loads
document.addEventListener('DOMContentLoaded', function() {
  generateTrustlineQR();
});


</script>
