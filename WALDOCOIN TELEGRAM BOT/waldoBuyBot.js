import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
dotenv.config();

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const userSessions = new Map();

const WALDO_ISSUER = 'rstjAWDiqKsUMhHqiJShRSkuaZ44TXZyDY';
const WALDO_API = process.env.WALDO_API;

// üì¢ Welcome & Help
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `üëã *Welcome to WALDOcoin Presale Bot!*\n\nUse the commands:\n/buy - Start presale\n/status - Check if WALDO delivered\n/trustline - Set trustline\n/airdrop - See bonus tiers\n/last - Show your last buy`, { parse_mode: 'Markdown' });
});

// üßæ Bonus tiers
bot.onText(/\/airdrop/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `üéÅ *WALDO Presale Bonus Tiers:*\n\nüí∏ 80 XRP ‚Üí +15%\nüí∏ 90 XRP ‚Üí +22%\nüí∏ 100 XRP ‚Üí +30%\n\nAll purchases = 10,000 WALDO per XRP.\nBonuses are automatic.\n\nType /buy to get started.`, { parse_mode: 'Markdown' });
});

// üîê Set trustline
bot.onText(/\/trustline/, (msg) => {
    const chatId = msg.chat.id;
    const link = `https://xrpl.services/tokens/WLO`;
    bot.sendMessage(chatId, `üõ°Ô∏è Set your WALDO trustline:\n${link}`);
});

// üí∞ Begin buy flow
bot.onText(/\/buy/, (msg) => {
    const chatId = msg.chat.id;
    userSessions.set(chatId, { step: 'amount' });
    bot.sendMessage(chatId, `üí∞ How much XRP do you want to spend? (1‚Äì100 XRP)`);
});

// üì¶ Last buy lookup
bot.onText(/\/last/, async (msg) => {
    const chatId = msg.chat.id;
    const session = userSessions.get(chatId);
    if (!session?.wallet) return bot.sendMessage(chatId, `‚ùå You must first /buy and enter your wallet.`);
    try {
        const res = await fetch(`${WALDO_API}/api/presale/analytics`, {
            headers: { 'x-admin-key': process.env.ADMIN_KEY }
        });
        const data = await res.json();
        const match = data.recentPurchases.find(p => p.wallet.includes(session.wallet.slice(0, 8)));
        if (!match) return bot.sendMessage(chatId, `‚ùå No purchase found for ${session.wallet}`);
        bot.sendMessage(chatId, `üì¶ Last WALDO Buy:\nüí∏ ${match.xrpAmount} XRP\nüéÅ ${match.waldoAmount} WALDO\nüìÖ ${new Date(match.timestamp).toLocaleString()}`);
    } catch (err) {
        console.error('‚ùå /last error', err);
        bot.sendMessage(chatId, `‚ö†Ô∏è Failed to fetch your last buy.`);
    }
});

// üöö Delivery status check
bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    const session = userSessions.get(chatId);
    if (!session?.wallet) return bot.sendMessage(chatId, `‚ùå You must first /buy and enter your wallet.`);
    try {
        const res = await fetch(`${WALDO_API}/api/presale/analytics`, {
            headers: { 'x-admin-key': process.env.ADMIN_KEY }
        });
        const data = await res.json();
        const match = data.recentPurchases.find(p => p.wallet.includes(session.wallet.slice(0, 8)));
        if (!match) return bot.sendMessage(chatId, `‚ùå No transaction found for ${session.wallet}`);
        const deliveryKey = `presale:delivery:${match.txHash}`;
        const delivery = await fetch(`${WALDO_API}/redis/hgetall?key=${deliveryKey}`).then(r => r.json());
        if (delivery.status === 'pending') {
            bot.sendMessage(chatId, `‚åõ WALDO delivery is still *pending*. Please check again soon.`);
        } else {
            bot.sendMessage(chatId, `‚úÖ WALDO delivery *sent*! Check your wallet.`);
        }
    } catch (err) {
        console.error('‚ùå /status error', err);
        bot.sendMessage(chatId, `‚ö†Ô∏è Failed to check delivery status.`);
    }
});

// üß† Smart input handling
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const session = userSessions.get(chatId);
    const text = msg.text.trim();

    if (!session || !session.step) return;

    // Step 1: XRP Amount
    if (session.step === 'amount') {
        const xrp = parseFloat(text);
        if (isNaN(xrp) || xrp < 1 || xrp > 100) {
            return bot.sendMessage(chatId, `‚ùå Invalid amount. Enter 1‚Äì100 XRP.`);
        }
        session.xrpAmount = xrp;
        session.step = 'wallet';
        bot.sendMessage(chatId, `üì¨ Now enter your XRPL wallet address:`);
    }

    // Step 2: Wallet
    else if (session.step === 'wallet') {
        if (!text.startsWith('r') || text.length < 25) {
            return bot.sendMessage(chatId, `‚ùå Invalid XRPL address.`);
        }

        // Check trustline
        try {
            const res = await fetch(`https://xrpl.services/api/v1/account/${text}/trustlines`);
            const { lines } = await res.json();
            const hasTrustline = lines.some(l => l.currency === 'WLO' && l.issuer === WALDO_ISSUER);

            if (!hasTrustline) {
                bot.sendMessage(chatId, `‚ö†Ô∏è *Warning:* WALDO trustline not found for this wallet.\nYou can still continue, but WALDO may not appear until you set the trustline.\nUse /trustline to fix.`, { parse_mode: 'Markdown' });
            }
        } catch (e) {
            console.warn('Trustline check failed:', e.message);
        }

        session.wallet = text;
        session.step = 'ready';
        bot.sendMessage(chatId, `‚úÖ You‚Äôre ready to buy *${session.xrpAmount} XRP* worth of WALDO!\nType /pay to continue.`, { parse_mode: 'Markdown' });
    }
});

// üîó Trigger XUMM presale payment
bot.onText(/\/pay/, async (msg) => {
    const chatId = msg.chat.id;
    const session = userSessions.get(chatId);
    if (!session?.wallet || !session.xrpAmount) {
        return bot.sendMessage(chatId, `‚ùå You must first /buy and enter wallet.`);
    }

    bot.sendMessage(chatId, `‚è≥ Generating XUMM QR for ${session.xrpAmount} XRP...`);

    try {
        const res = await fetch(`${WALDO_API}/api/presale/buy`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                wallet: session.wallet,
                xrpAmount: session.xrpAmount
            })
        });

        const data = await res.json();
        if (!data.success) throw new Error(data.error);

        const caption = `‚úÖ *WALDO Presale Payment Ready!*\n\nüí∏ ${session.xrpAmount} XRP\nüéÅ ${data.calculation.totalWaldo.toLocaleString()} WALDO\nüì≤ Sign with XUMM below:`;
        bot.sendPhoto(chatId, data.qr, {
            caption,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[{ text: 'Open XUMM App', url: data.deeplink }]]
            }
        });

    } catch (err) {
        console.error('‚ùå Buy error', err);
        bot.sendMessage(chatId, `‚ùå Failed to create payment. Try again later.`);
    }
});
